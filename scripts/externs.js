var require = function() {};
var exports = {};
var define = function() {};
define.amd = {};
var IdGenerator = {};
var X = {};
var EventDispatcher = {};
var AbstructSystem = function(name, fitRule){};
AbstructSystem.prototype.id;
AbstructSystem.prototype.isSystem;
AbstructSystem.prototype.name;
AbstructSystem.prototype.disabled;
AbstructSystem.prototype.loopTimes;
AbstructSystem.prototype.entitySet;
AbstructSystem.prototype.usedBy;
AbstructSystem.prototype.fit = function(entity){};
AbstructSystem.prototype.destroy = function(){};
AbstructSystem.prototype.handle = function(entity, params){};
AbstructSystem.prototype.checkUpdatedEntities = function(manager){};
AbstructSystem.prototype.run = function(world, params){};
var Component = function(name, data){};
Component.prototype.isComponent;
Component.prototype.data;
Component.prototype.disabled;
Component.prototype.name;
Component.prototype.usedBy;
var ComponentManager = function(){}
ComponentManager.prototype.elements;
ComponentManager.prototype.disabled;
ComponentManager.prototype.usedBy;
ComponentManager.prototype.isComponentManager;
ComponentManager.prototype.add = function(component){};
ComponentManager.prototype.addComponentDirect = function(component){};
ComponentManager.prototype.clear = function(){};
ComponentManager.prototype.get = function(name){};
ComponentManager.prototype.has = function(component){};
ComponentManager.prototype.isMixedFrom = function(componentManager){};
ComponentManager.prototype.mixFrom = function(componentManager){};
ComponentManager.prototype.remove = function(component){};
ComponentManager.prototype.removeByName = function(name){};
ComponentManager.prototype.removeByInstance = function(component){};
var Entity = function(name, componentManager){};
Entity.prototype.id;
Entity.prototype.isEntity;
Entity.prototype.componentManager;
Entity.prototype.name;
Entity.prototype.usedBy;
Entity.prototype.addComponent = function(component){};
Entity.prototype.addTo = function(manager){};
Entity.prototype.addToWorld = function(world){};
Entity.prototype.getComponent = function(name){};
Entity.prototype.hasComponent = function(component){};
Entity.prototype.registerComponentManager = function(undefined){};
Entity.prototype.removeComponent = function(component){};
Entity.prototype.unregisterComponentManager = function(){};
var EntityManager = function(world){};
EntityManager.prototype.elements;
EntityManager.prototype.data;
EntityManager.prototype.disabled;
EntityManager.prototype.updatedEntities;
EntityManager.prototype.isEntityManager;
EntityManager.prototype.usedBy;
EntityManager.prototype.add = function(entity){};
EntityManager.prototype.addComponentDirect = function(entity){};
EntityManager.prototype.clear = function(){};
EntityManager.prototype.get = function(name){};
EntityManager.prototype.has = function(entity){};
EntityManager.prototype.remove = function(entity){};
EntityManager.prototype.removeByName = function(name){};
EntityManager.prototype.removeByInstance = function(entity){};
var SystemManager = function(world){};
SystemManager.prototype.disabled;
SystemManager.prototype.elements;
SystemManager.prototype.loopTimes;
SystemManager.prototype.usedBy;
SystemManager.AFTER_RUN;
SystemManager.BEFORE_RUN;
SystemManager.prototype.add = function(system){};
SystemManager.prototype.clear = function(){};
SystemManager.prototype.get = function(name){};
SystemManager.prototype.has = function(element){};
SystemManager.prototype.remove = function(system){};
SystemManager.prototype.removeByName = function(name){};
SystemManager.prototype.removeByInstance = function(system){};
SystemManager.prototype.run = function(world, params){};
var World = function(name, entityManager, systemManager){};
World.prototype.name;
World.prototype.entityManager;
World.prototype.systemManager;
World.prototype.id;
World.prototype.isWorld;
World.prototype.add = function(element){};
World.prototype.addEntity = function(entity){};
World.prototype.addSystem = function(system){};
World.prototype.hasEntity = function(entity){};
World.prototype.hasSystem = function(system){};
World.prototype.registerEntityManager = function(manager){};
World.prototype.registerSystemManager = function(manager){};
World.prototype.remove = function(element){};
World.prototype.removeEntity = function(entity){};
World.prototype.removeSystem = function(system){};
World.prototype.run = function(params){};
World.prototype.unregisterEntityManager = function(){};
World.prototype.unregisterSystemManager = function(){};