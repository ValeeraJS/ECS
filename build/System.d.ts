import { EventFirer } from "@valeera/eventfire";
import { IEntity } from "./interfaces/IEntity";
import { IEntityManager } from "./interfaces/IEntityManager";
import { ISystem } from "./interfaces/ISystem";
import { ISystemManager } from "./interfaces/ISystemManager";
import { IWorld } from "./interfaces/IWorld";
type TQueryRule = (entity: IEntity) => boolean;
export declare abstract class System extends EventFirer implements ISystem {
    readonly id: number;
    readonly isSystem = true;
    name: string;
    loopTimes: number;
    entitySet: WeakMap<IEntityManager, Set<IEntity>>;
    usedBy: ISystemManager[];
    cache: WeakMap<IEntity, any>;
    autoUpdate: boolean;
    protected currentDelta: number;
    protected currentTime: number;
    protected currentWorld: IWorld | null;
    protected rule: TQueryRule;
    protected _disabled: boolean;
    protected _priority: number;
    get disabled(): boolean;
    set disabled(value: boolean);
    get priority(): number;
    set priority(v: number);
    constructor(name: string | undefined, fitRule: TQueryRule);
    checkUpdatedEntities(manager: IEntityManager | null): this;
    checkEntityManager(manager: IEntityManager | null): this;
    query(entity: IEntity): boolean;
    run(world: IWorld, time: number, delta: number): this;
    serialize(): any;
    destroy(): this;
    handleBefore(time: number, delta: number, world: IWorld): this;
    abstract handle(entity: IEntity, time: number, delta: number, world: IWorld): this;
}
export {};
