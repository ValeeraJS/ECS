import { ComponentManager } from "./ComponentManager";
import { IEventFirer } from "@valeera/eventfire";
import { IEntitySerializedJson } from "./interfaces/ISerializable";
import { EntityManager } from "./EntityManager";
import { Component, ComponentConstructor } from "./Component";
import { World } from "./World";
declare const Entity_base: (new (...args: any[]) => {
    filters: import("@valeera/eventfire").TFilter[];
    listeners: Map<import("@valeera/eventfire").TEventKey, import("@valeera/eventfire").TListenersValue>;
    all(listener: import("@valeera/eventfire").TListener, checkDuplicate?: boolean): any;
    clearListenersByKey(eventKey: import("@valeera/eventfire").TEventKey): any;
    clearAllListeners(): any;
    filt(rule: import("@valeera/eventfire").TEventFilter, listener: import("@valeera/eventfire").TListenerFilter, checkDuplicate?: boolean): any;
    fire(eventKey: import("@valeera/eventfire").TEventKey | import("@valeera/eventfire").TEventKey[], target?: any): any;
    off(eventKey: import("@valeera/eventfire").TEventKey, listener: import("@valeera/eventfire").TListener): any;
    on(eventKey: import("@valeera/eventfire").TEventKey | import("@valeera/eventfire").TEventKey[], listener: import("@valeera/eventfire").TListener, checkDuplicate?: boolean): any;
    once(eventKey: import("@valeera/eventfire").TEventKey, listener: import("@valeera/eventfire").TListener, checkDuplicate?: boolean): any;
    times(eventKey: import("@valeera/eventfire").TEventKey, times: number, listener: import("@valeera/eventfire").TListener, checkDuplicate?: boolean): any;
}) & {
    new (...a: any[]): {
        parent: any;
        children: any[];
        addChild(node: import("@valeera/tree").ITreeNodeData): any;
        depth(): number;
        findLeaves(): any[];
        findRoot(): any;
        hasAncestor(ancestor: any): boolean;
        isLeaf(): boolean;
        removeChild(child: any): any;
        toArray(): any[];
        traversePostorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
        traversePreorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
    };
    new (value?: any): {
        parent: any;
        children: any[];
        addChild(node: import("@valeera/tree").ITreeNodeData): any;
        depth(): number;
        findLeaves(): any[];
        findRoot(): any;
        hasAncestor(ancestor: any): boolean;
        isLeaf(): boolean;
        removeChild(child: any): any;
        toArray(): any[];
        traversePostorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
        traversePreorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
    };
    mixin: <TBase extends new (...a: any[]) => Object>(Base?: ObjectConstructor | TBase) => {
        new (...a: any[]): {
            parent: any;
            children: any[];
            addChild(node: import("@valeera/tree").ITreeNodeData): any;
            depth(): number;
            findLeaves(): any[];
            findRoot(): any;
            hasAncestor(ancestor: any): boolean;
            isLeaf(): boolean;
            removeChild(child: any): any;
            toArray(): any[];
            traversePostorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
            traversePreorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
        };
        new (value?: any): {
            parent: any;
            children: any[];
            addChild(node: import("@valeera/tree").ITreeNodeData): any;
            depth(): number;
            findLeaves(): any[];
            findRoot(): any;
            hasAncestor(ancestor: any): boolean;
            isLeaf(): boolean;
            removeChild(child: any): any;
            toArray(): any[];
            traversePostorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
            traversePreorder(visitor: import("@valeera/tree").IVisitor<any>, ...rest: any[]): any;
        };
        mixin: any;
        addChild<T extends import("@valeera/tree").ITreeNodeData>(node: T, child: import("@valeera/tree").ITreeNodeData): T;
        depth(node: import("@valeera/tree").ITreeNodeData): number;
        findLeaves<T_1 extends import("@valeera/tree").ITreeNodeData>(node: T_1): T_1[];
        findRoot<T_2 extends import("@valeera/tree").ITreeNodeData>(node: T_2): import("@valeera/tree").ITreeNodeData;
        hasAncestor(node: import("@valeera/tree").ITreeNodeData, ancestor: import("@valeera/tree").ITreeNodeData): boolean;
        isLeaf(node: import("@valeera/tree").ITreeNodeData): boolean;
        removeChild<T_3 extends import("@valeera/tree").ITreeNodeData>(node: T_3, child: T_3): T_3;
        toArray<T_4 extends import("@valeera/tree").ITreeNodeData>(node: T_4): T_4[];
        traversePostorder<T_5 extends import("@valeera/tree").ITreeNodeData>(node: T_5, visitor: import("@valeera/tree").IVisitor<T_5>, ...rest: any[]): T_5;
        traversePreorder<T_6 extends import("@valeera/tree").ITreeNodeData>(node: T_6, visitor: import("@valeera/tree").IVisitor<T_6>, ...rest: any[]): T_6;
    };
    addChild<T_7 extends import("@valeera/tree").ITreeNodeData>(node: T_7, child: import("@valeera/tree").ITreeNodeData): T_7;
    depth(node: import("@valeera/tree").ITreeNodeData): number;
    findLeaves<T_8 extends import("@valeera/tree").ITreeNodeData>(node: T_8): T_8[];
    findRoot<T_9 extends import("@valeera/tree").ITreeNodeData>(node: T_9): import("@valeera/tree").ITreeNodeData;
    hasAncestor(node: import("@valeera/tree").ITreeNodeData, ancestor: import("@valeera/tree").ITreeNodeData): boolean;
    isLeaf(node: import("@valeera/tree").ITreeNodeData): boolean;
    removeChild<T_10 extends import("@valeera/tree").ITreeNodeData>(node: T_10, child: T_10): T_10;
    toArray<T_11 extends import("@valeera/tree").ITreeNodeData>(node: T_11): T_11[];
    traversePostorder<T_12 extends import("@valeera/tree").ITreeNodeData>(node: T_12, visitor: import("@valeera/tree").IVisitor<T_12>, ...rest: any[]): T_12;
    traversePreorder<T_13 extends import("@valeera/tree").ITreeNodeData>(node: T_13, visitor: import("@valeera/tree").IVisitor<T_13>, ...rest: any[]): T_13;
};
export declare class Entity extends Entity_base implements IEventFirer {
    readonly id: number;
    readonly isEntity = true;
    readonly componentManager: ComponentManager;
    disabled: boolean;
    name: string;
    usedBy: EntityManager[];
    constructor(name?: string);
    add(componentOrChild: Component<any> | Entity): this;
    addComponent(component: Component<any>): this;
    addChild(entity: Entity): this;
    addTo(worldOrManager: EntityManager | World | Entity): this;
    addToWorld(world: World): this;
    addToManager(manager: EntityManager): this;
    clone(cloneComponents?: boolean, includeChildren?: boolean): Entity;
    destroy(): this;
    getComponent<T>(nameOrId: string | number | ComponentConstructor<T>): Component<T> | null;
    getComponentsByTagLabel(label: string): Component<any>[];
    getComponentByTagLabel(label: string): Component<any> | null;
    getComponentsByClass<T>(clazz: ComponentConstructor<T>): Component<T>[];
    hasComponent(component: Component<any> | string | number | ComponentConstructor<any>): boolean;
    remove(entityOrComponent: Entity | Component<any> | ComponentConstructor<any>): this;
    removeChild(entity: Entity): this;
    removeComponent(component: Component<any> | string | ComponentConstructor<any>): this;
    serialize(): IEntitySerializedJson;
}
export {};
